# Generated by Django 4.2.10 on 2024-04-02 14:59

import logging
from django.db import migrations
from django.forms.models import model_to_dict
from django.db.models import Q
from django.db import IntegrityError
from django.db import transaction

log = logging.getLogger(__name__)

required_fields = [
        "reference",
        "regime_reg_ref",
        "notifying_government",
        "item_list_codes",
        "item_description",
        "end_use",
        "is_revoked",
        "is_revoked_comment",
        "reason_for_refusal",
]

def denials_data_migration(apps, schema_editor):
    DenialEntity = apps.get_model("external_data", "DenialEntity")
    Denial = apps.get_model("external_data", "Denial")

    # There are a handfull (10) of regime_reg_refs that are null which was in the initial load
    # Assumption here is that they can be deleted since it's erroneous data as we now know 
    # regime_reg_ref is considered a unique DN record. 

    total_null_regime_reg_ref =  DenialEntity.objects.filter(Q(regime_reg_ref__isnull=True) | Q(regime_reg_ref=''))
    log.info(
            "Delete null regime_reg_ref total -> %s",
            total_null_regime_reg_ref.count(),
    )
    total_null_regime_reg_ref.delete()
    duplicate_denial_errors = []
    with transaction.atomic():
        sid = transaction.savepoint()
        for denial_entity in DenialEntity.objects.all():
            try:
                denial_entity_dict = {key:value for (key,value) in model_to_dict(denial_entity).items() if key in required_fields}
                denial , _ = Denial.objects.get_or_create(**denial_entity_dict)
                denial_entity.denial = denial
                denial_entity.save()
            except IntegrityError as e:
                    duplicate_denial_errors.append(denial_entity.regime_reg_ref)
        
        if duplicate_denial_errors:
            log.info(
                "There are the following duplicate denials in the database rolling back this migration: -> %s",
                    duplicate_denial_errors,
            )
            transaction.savepoint_rollback(sid)
        else:
            transaction.savepoint_commit(sid)   

class Migration(migrations.Migration):
    dependencies = [
        ("external_data", "0023_set_denial_entity_type"),
    ]

    operations = [migrations.RunPython(denials_data_migration, migrations.RunPython.noop, atomic=False)]
