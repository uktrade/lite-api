# Generated by Django 4.2.16 on 2024-12-03 14:48

from django.db import migrations

from api.audit_trail.enums import AuditType
from api.cases.enums import (
    AdviceLevel,
    AdviceType,
)


LICENSING_UNIT_ID = "58e77e47-42c8-499f-a58d-94f94541f8c6"


def update_licencedecision_denial_reasons(apps, schema_editor):
    LicenceDecision = apps.get_model("cases", "LicenceDecision")
    Advice = apps.get_model("cases", "Advice")

    denial_reasons = (
        Advice.objects.filter(
            case__licence_decisions__decision="refused",
            level=AdviceLevel.FINAL,
            team_id=LICENSING_UNIT_ID,  # Just care about LU advice
            type=AdviceType.REFUSE,
        )
        .only("denial_reasons__id", "case__licence_decisions__id")
        .values_list("denial_reasons__id", "case__licence_decisions__id")
        # The AdviceManager orders by `created_at` and this affects the distinct
        # so we remove the ordering completely to ensure the distinct workds as
        # expected
        .order_by()
        .distinct()
    )

    for denial_reason, licence_decision_id in denial_reasons:
        licence_decision = LicenceDecision.objects.get(pk=licence_decision_id)
        licence_decision.denial_reasons.add(denial_reason)

    updated_cases = set()
    for denial_reason, licence_decision_id in denial_reasons:
        licence_decision = LicenceDecision.objects.get(pk=licence_decision_id)
        licence_decision.denial_reasons.add(denial_reason)
        updated_cases.add(licence_decision.case.pk)

    Audit = apps.get_model("audit_trail", "Audit")
    Case = apps.get_model("cases", "Case")
    ContentType = apps.get_model("contenttypes", "ContentType")
    case_content_type = ContentType.objects.get_for_model(Case)

    refusal_criteria_audits = Audit.objects.exclude(
        target_content_type_id=case_content_type.pk,
        target_object_id__in=updated_cases,
    ).filter(verb=AuditType.CREATE_REFUSAL_CRITERIA)
    for audit in refusal_criteria_audits:
        case = Case.objects.get(pk=audit.target_object_id)
        refusal_licence_decisions = case.licence_decisions.filter(decision="refused")
        if not refusal_licence_decisions.exists():
            continue
        for licence_decision in refusal_licence_decisions:
            denial_reasons = audit.payload["additional_text"].replace(".", "").replace(" ", "").split(",")
            licence_decision.denial_reasons.set(denial_reasons)


class Migration(migrations.Migration):

    dependencies = [
        ("cases", "0073_licencedecision_denial_reasons"),
    ]

    operations = [
        migrations.RunPython(
            update_licencedecision_denial_reasons,
            migrations.RunPython.noop,
        ),
    ]
