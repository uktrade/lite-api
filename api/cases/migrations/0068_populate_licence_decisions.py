# Generated by Django 4.2.16 on 2024-10-29 14:32
import datetime
import functools
import operator

from django.contrib.postgres.aggregates import ArrayAgg
from django.contrib.postgres.fields import ArrayField
from django.db import migrations, transaction
from django.db.models import (
    Case as DBCase,
    Q,
    TextField,
    Value,
    When,
)
from django.db.models.functions import Cast

from api.audit_trail.enums import AuditType
from api.cases.enums import AdviceType
from api.licences.enums import LicenceStatus
from api.staticdata.statuses.enums import CaseStatusEnum


SIEL_LICENCE_TEMPLATE_ID = "d159b195-9256-4a00-9bc8-1eb2cebfa1d2"
SIEL_REFUSAL_TEMPLATE_ID = "074d8a54-ee10-4dca-82ba-650460650342"


class LicenceDecisionType:
    ISSUED = "issued"
    REFUSED = "refused"

    choices = [
        (ISSUED, "issued"),
        (REFUSED, "refused"),
    ]

    decision_map = {
        AdviceType.APPROVE: ISSUED,
        AdviceType.REFUSE: REFUSED,
    }

    @classmethod
    def templates(cls):
        return {
            cls.ISSUED: SIEL_LICENCE_TEMPLATE_ID,
            cls.REFUSED: SIEL_REFUSAL_TEMPLATE_ID,
        }

    @classmethod
    def advice_type_to_decision(cls, advice_type):
        return cls.decision_map[advice_type]

    @classmethod
    def get_template(cls, decision):
        return cls.templates()[decision]


def get_decision_made_at(apps, case):
    Audit = apps.get_model("audit_trail", "Audit")

    if case.decision in list([LicenceDecisionType.ISSUED, LicenceDecisionType.REFUSED]):
        documents = case.casedocument_set.filter(
            generatedcasedocument__template_id=LicenceDecisionType.get_template(case.decision),
            safe=True,
            visible_to_exporter=True,
        )
        return documents.earliest("created_at").created_at

    if case.decision == "revoked":
        audits = Audit.objects.filter(
            target_object_id=case.pk,
            payload__status=LicenceStatus.REVOKED,
            verb=AuditType.LICENCE_UPDATED_STATUS,
        )

        return audits.earliest("created_at").created_at


def get_generated_document_based_decisions(apps):
    Case = apps.get_model("cases", "Case")
    Audit = apps.get_model("audit_trail", "Audit")

    return (
        (
            Case.objects.filter(
                casedocument__generatedcasedocument__template_id__in=LicenceDecisionType.templates().values(),
                casedocument__visible_to_exporter=True,
                casedocument__safe=True,
            )
            .annotate(
                template_ids=ArrayAgg(
                    Cast("casedocument__generatedcasedocument__template_id", output_field=TextField()),
                    distinct=True,
                )
            )
            .filter(
                functools.reduce(
                    operator.or_,
                    [Q(template_ids=[template_id]) for template_id in LicenceDecisionType.templates().values()],
                )
            )
            .annotate(
                decision=DBCase(
                    *[
                        When(template_ids=[template_id], then=Value(decision))
                        for decision, template_id in LicenceDecisionType.templates().items()
                    ]
                )
            )
            .distinct()
        )
        .union(
            Case.objects.filter(
                pk__in=list(
                    Audit.objects.filter(
                        payload__status=LicenceStatus.REVOKED,
                        verb=AuditType.LICENCE_UPDATED_STATUS,
                    ).values_list("target_object_id", flat=True)
                )
            ).annotate(
                template_ids=Value([], output_field=ArrayField(TextField())),
                decision=Value("revoked", output_field=TextField()),
            ),
            all=True,
        )
        .order_by("-reference_code")
    )


@transaction.atomic
def populate_licence_decisions(apps, schema_editor):
    Audit = apps.get_model("audit_trail", "Audit")
    GeneratedCaseDocument = apps.get_model("generated_documents", "GeneratedCaseDocument")
    LicenceDecision = apps.get_model("cases", "LicenceDecision")

    found_decisions = set()
    licence_decisions = []

    created_final_recommendations = Audit.objects.filter(verb=AuditType.CREATED_FINAL_RECOMMENDATION).order_by(
        "created_at"
    )
    for audit_log in created_final_recommendations:
        advice_type = audit_log.payload["decision"]
        if advice_type not in [AdviceType.APPROVE, AdviceType.REFUSE]:
            continue
        case_id = audit_log.target_object_id
        decision = LicenceDecisionType.advice_type_to_decision(advice_type)
        found_decision = (str(case_id), decision)
        if found_decision in found_decisions:
            continue
        licence_decisions.append(
            LicenceDecision(
                case_id=audit_log.target_object_id,
                created_at=audit_log.created_at,
                decision=decision,
            )
        )
        found_decisions.add(found_decision)

    case_statuses = [*CaseStatusEnum.terminal_statuses(), CaseStatusEnum.REOPENED_DUE_TO_ORG_CHANGES]
    generated_case_documents = GeneratedCaseDocument.objects.filter(
        case__status__status__in=case_statuses,
        template_id__in=[SIEL_LICENCE_TEMPLATE_ID, SIEL_REFUSAL_TEMPLATE_ID],
        advice_type__in=[AdviceType.APPROVE, AdviceType.REFUSE],
        visible_to_exporter=True,
        safe=True,
    ).annotate(
        decision=DBCase(
            When(template_id=SIEL_LICENCE_TEMPLATE_ID, then=Value(LicenceDecisionType.ISSUED)),
            When(template_id=SIEL_REFUSAL_TEMPLATE_ID, then=Value(LicenceDecisionType.REFUSED)),
        ),
    )
    for case_document in generated_case_documents:
        found_decision = (str(case_document.case_id), case_document.decision)
        if found_decision in found_decisions:
            continue
        licence_decisions.append(
            LicenceDecision(
                case_id=case_document.case.pk,
                created_at=case_document.created_at,
                decision=case_document.decision,
            )
        )
        found_decisions.add(found_decision)

    LicenceDecision.objects.bulk_create(licence_decisions)

    for case in get_generated_document_based_decisions(apps):
        try:
            licence_decision = LicenceDecision.objects.get(case_id=case.pk, decision=case.decision)
        except LicenceDecision.DoesNotExist:
            pass
        else:
            if (licence_decision.created_at - get_decision_made_at(apps, case)) > datetime.timedelta(days=3):
                licence_decision.created_at = get_decision_made_at(apps, case)
                licence_decision.save


class Migration(migrations.Migration):

    dependencies = [
        ("cases", "0067_licencedecision"),
        ("generated_documents", "0002_alter_generatedcasedocument_advice_type"),
    ]

    operations = [
        migrations.RunPython(
            populate_licence_decisions,
            migrations.RunPython.noop,
        ),
    ]
