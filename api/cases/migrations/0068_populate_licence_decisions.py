# Generated by Django 4.2.16 on 2024-10-29 14:32
from django.db import migrations, transaction
from django.db.models import Case as Case, Value, When

from api.audit_trail.enums import AuditType
from api.cases.enums import (
    AdviceType,
    LicenceDecisionType,
)
from api.staticdata.statuses.enums import CaseStatusEnum


SIEL_LICENCE_TEMPLATE_ID = "d159b195-9256-4a00-9bc8-1eb2cebfa1d2"
SIEL_REFUSAL_TEMPLATE_ID = "074d8a54-ee10-4dca-82ba-650460650342"


@transaction.atomic
def populate_licence_decisions(apps, schema_editor):
    Audit = apps.get_model("audit_trail", "Audit")
    GeneratedCaseDocument = apps.get_model("generated_documents", "GeneratedCaseDocument")
    LicenceDecision = apps.get_model("cases", "LicenceDecision")

    found_decisions = set()
    licence_decisions = []

    created_final_recommendations = Audit.objects.filter(
        verb=AuditType.CREATED_FINAL_RECOMMENDATION,
    )
    for audit_log in created_final_recommendations:
        advice_type = audit_log.payload["decision"]
        if advice_type not in [AdviceType.APPROVE, AdviceType.REFUSE]:
            continue
        case_id = audit_log.target_object_id
        decision = LicenceDecisionType.advice_type_to_decision(advice_type)
        found_decision = (str(case_id), decision)
        if found_decision in found_decisions:
            continue
        licence_decisions.append(
            LicenceDecision(
                case_id=audit_log.target_object_id,
                created_at=audit_log.created_at,
                decision=decision,
            )
        )
        found_decisions.add(found_decision)

    case_statuses = [*CaseStatusEnum.terminal_statuses(), CaseStatusEnum.REOPENED_DUE_TO_ORG_CHANGES]
    generated_case_documents = GeneratedCaseDocument.objects.filter(
        case__status__status__in=case_statuses,
        template_id__in=[SIEL_LICENCE_TEMPLATE_ID, SIEL_REFUSAL_TEMPLATE_ID],
        advice_type__in=[AdviceType.APPROVE, AdviceType.REFUSE],
        visible_to_exporter=True,
        safe=True,
    ).annotate(
        decision=Case(
            When(template_id=SIEL_LICENCE_TEMPLATE_ID, then=Value(LicenceDecisionType.ISSUED)),
            When(template_id=SIEL_REFUSAL_TEMPLATE_ID, then=Value(LicenceDecisionType.REFUSED)),
        ),
    )
    for case_document in generated_case_documents:
        found_decision = (str(case_document.case_id), case_document.decision)
        if found_decision in found_decisions:
            continue
        licence_decisions.append(
            LicenceDecision(
                case_id=case_document.case.pk,
                created_at=case_document.created_at,
                decision=case_document.decision,
            )
        )
        found_decisions.add(found_decision)

    LicenceDecision.objects.bulk_create(licence_decisions)


class Migration(migrations.Migration):

    dependencies = [
        ("cases", "0067_licencedecision"),
        ("generated_documents", "0002_alter_generatedcasedocument_advice_type"),
    ]

    operations = [
        migrations.RunPython(
            populate_licence_decisions,
            migrations.RunPython.noop,
        ),
    ]
