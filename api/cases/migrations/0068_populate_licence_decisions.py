# Generated by Django 4.2.16 on 2024-10-29 14:32
import functools
import operator

from django.contrib.postgres.aggregates import ArrayAgg
from django.db import migrations, transaction
from django.db.models import Case, Q, TextField, Value, When
from django.db.models.functions import Cast


from api.cases.enums import AdviceType, LicenceDecisionType
from api.staticdata.statuses.enums import CaseStatusEnum


@transaction.atomic
def populate_licence_decisions(apps, schema_editor):
    GeneratedCaseDocument = apps.get_model("generated_documents", "GeneratedCaseDocument")
    LicenceDecision = apps.get_model("cases", "LicenceDecision")

    document_qs = (
        GeneratedCaseDocument.objects.filter(
            template_id__in=LicenceDecisionType.templates().values(),
            visible_to_exporter=True,
            safe=True,
        )
        .annotate(template_ids=ArrayAgg(Cast("template_id", output_field=TextField()), distinct=True))
        .filter(
            functools.reduce(
                operator.or_,
                [Q(template_ids=[template_id]) for template_id in LicenceDecisionType.templates().values()],
            )
        )
        .annotate(
            decision=Case(
                *[
                    When(template_ids=[template_id], then=Value(decision))
                    for decision, template_id in LicenceDecisionType.templates().items()
                ]
            )
        )
        .distinct()
    )

    licence_decisions = [
        LicenceDecision(
            case=item.case,
            decision=item.decision,
            licence=item.licence,
            decision_made_at=item.created_at,
        )
        for item in document_qs
    ]

    LicenceDecision.objects.bulk_create(licence_decisions)


class Migration(migrations.Migration):

    dependencies = [
        ("cases", "0067_licencedecision"),
    ]

    operations = [
        migrations.RunPython(
            populate_licence_decisions,
            migrations.RunPython.noop,
        ),
    ]
