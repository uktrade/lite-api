# Generated by Django 4.2.16 on 2024-11-19 16:52

from django.db import migrations, models, transaction

from django.db.models import Count

from api.cases.enums import LicenceDecisionType


@transaction.atomic
def populate_issued_on_appeal(apps, schema_editor):
    Case = apps.get_model("cases", "Case")
    LicenceDecision = apps.get_model("cases", "LicenceDecision")

    licence_decisions_to_update = []

    # Filter cases that have two decisions because for appeals
    # the first decision will be refused which is issued on appeal later
    case_qs = (
        Case.objects.all()
        .annotate(
            num_decisions=Count("licence_decisions"),
        )
        .filter(
            num_decisions=2,
        )
    )

    for case in case_qs:
        prev, current = case.licence_decisions.all()
        if prev.decision == LicenceDecisionType.REFUSED and current.decision == LicenceDecisionType.ISSUED:
            current.decision = LicenceDecisionType.ISSUED_ON_APPEAL
            licence_decisions_to_update.append(current)

    LicenceDecision.objects.bulk_update(licence_decisions_to_update, ["decision"])


class Migration(migrations.Migration):

    dependencies = [
        ("cases", "0071_licencedecision_previous_decision"),
    ]

    operations = [
        migrations.AlterField(
            model_name="licencedecision",
            name="decision",
            field=models.CharField(
                choices=[
                    ("issued", "issued"),
                    ("refused", "refused"),
                    ("revoked", "revoked"),
                    ("issued_on_appeal", "issued_on_appeal"),
                ],
                max_length=50,
            ),
        ),
        migrations.RunPython(
            populate_issued_on_appeal,
            migrations.RunPython.noop,
        ),
    ]
