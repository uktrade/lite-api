# Generated by Django 4.2.16 on 2024-11-13 17:19
from django.db import migrations, transaction

from api.audit_trail.enums import AuditType
from api.cases.enums import LicenceDecisionType


@transaction.atomic
def attach_licence_to_licence_decisions(apps, schema_editor):

    Audit = apps.get_model("audit_trail", "Audit")
    Licence = apps.get_model("licences", "Licence")
    LicenceDecision = apps.get_model("cases", "LicenceDecision")
    GeneratedCaseDocument = apps.get_model("generated_documents", "GeneratedCaseDocument")

    licence_decisions_to_update = []

    siel_licence_template = LicenceDecisionType.templates()[LicenceDecisionType.ISSUED]

    licence_decision_qs = LicenceDecision.objects.filter(decision=LicenceDecisionType.ISSUED, licence__isnull=True)

    for obj in licence_decision_qs:
        try:
            audit_log = Audit.objects.get(
                target_object_id=obj.case_id,
                verb=AuditType.CREATED_FINAL_RECOMMENDATION,
                created_at=obj.created_at,
            )
            licence = Licence.objects.get(reference_code=audit_log.payload["licence_reference"])
        except Audit.DoesNotExist:
            document = GeneratedCaseDocument.objects.get(
                case_id=obj.case_id,
                advice_type="approve",
                template_id=siel_licence_template,
                created_at=obj.created_at,
            )
            licence = document.licence

        obj.licence = licence
        licence_decisions_to_update.append(obj)

    LicenceDecision.objects.bulk_update(licence_decisions_to_update, ["licence"])


class Migration(migrations.Migration):

    dependencies = [
        ("cases", "0069_licencedecision_excluded_from_statistics_reason"),
    ]

    operations = [
        migrations.RunPython(
            attach_licence_to_licence_decisions,
            migrations.RunPython.noop,
        ),
    ]
