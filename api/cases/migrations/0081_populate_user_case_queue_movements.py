# Generated by Django 4.2.16 on 2025-02-11 16:39

from django.db import migrations, transaction

from api.audit_trail.enums import AuditType


@transaction.atomic
def populate_user_case_queue_movements(apps, schema_editor):
    Audit = apps.get_model("audit_trail", "Audit")
    CaseQueueMovement = apps.get_model("cases", "CaseQueueMovement")
    Queue = apps.get_model("queues", "Queue")

    case_queue_movements_to_update = []

    move_case_qs = Audit.objects.filter(
        verb=AuditType.MOVE_CASE,
        action_object_object_id__isnull=False,
        payload__queue_ids__isnull=False,
        payload__queues__isnull=False,
    )
    for event in move_case_qs:
        case_id = event.action_object_object_id

        for queue_id in event.payload["queue_ids"]:
            obj = CaseQueueMovement.objects.get(
                case_id=case_id,
                queue_id=queue_id,
                created_at=event.created_at,
            )
            obj.user = event.actor
            case_queue_movements_to_update.append(obj)

    # Some of the early events only have queue name in the payload so they are processed separately
    move_case_qs = Audit.objects.filter(
        verb=AuditType.MOVE_CASE,
        action_object_object_id__isnull=False,
        payload__queue_ids__isnull=True,
        payload__queues__isnull=False,
    )
    for event in move_case_qs:
        case_id = event.action_object_object_id
        queue_name = event.payload["queues"]
        if Queue.objects.filter(name=queue_name).exists():
            queue = Queue.objects.get(name=queue_name)
            obj = CaseQueueMovement.objects.get(
                case_id=case_id,
                queue_id=queue.id,
                created_at=event.created_at,
            )
            obj.user = event.actor
            case_queue_movements_to_update.append(obj)

    CaseQueueMovement.objects.bulk_update(case_queue_movements_to_update, ["user"])


class Migration(migrations.Migration):

    dependencies = [
        ("cases", "0080_casequeuemovement_user"),
    ]

    operations = [
        migrations.RunPython(
            populate_user_case_queue_movements,
            migrations.RunPython.noop,
        ),
    ]
