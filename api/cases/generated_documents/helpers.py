from collections import namedtuple

from django.utils import timezone
from weasyprint import CSS, HTML
from weasyprint.fonts import FontConfiguration
from rest_framework.exceptions import ParseError, ValidationError

from api.staticdata.statuses.enums import CaseStatusEnum
from api.cases.enums import CaseDocumentState, AdviceType
from api.cases.libraries.get_case import get_case
from api.cases.models import CaseDocument
from api.core.exceptions import NotFoundError
from api.documents.libraries import s3_operations
from api.licences.models import Licence
from api.letter_templates.helpers import get_css_location, generate_preview, DocumentPreviewError
from api.letter_templates.models import LetterTemplate
from lite_content.lite_api import strings
from api.parties.enums import PartyType
from api.parties.models import Party

font_config = FontConfiguration()
GeneratedDocumentPayload = namedtuple("GeneratedDocumentPayload", "case template document_html text")


def html_to_pdf(html: str, template_name: str, base_url):
    html = HTML(string=html, base_url=base_url)
    css = CSS(filename=get_css_location(template_name), font_config=font_config)

    """
    Presentational hints are not enabled by default and they include a wide array of attributes
    that direct styling in HTML, including font color and size, list attributes like type and start,
    various table alignment attributes, and others. If the document generated by WeasyPrint is
    missing some of the features you expect from the HTML, try to enable this option
    """
    return html.write_pdf(stylesheets=[css], presentational_hints=True)


def auto_generate_case_document(layout, case, document_name, base_url):
    html = generate_preview(layout=layout, text="", case=case)
    pdf = html_to_pdf(html, layout, base_url)
    s3_key = s3_operations.generate_s3_key(layout, "pdf")
    CaseDocument.objects.create(
        name=f"{document_name} - {timezone.now()}.pdf",
        s3_key=s3_key,
        virus_scanned_at=timezone.now(),
        safe=True,
        type=CaseDocumentState.AUTO_GENERATED,
        case=case,
        visible_to_exporter=False,
    )
    s3_operations.upload_bytes_file(raw_file=pdf, s3_key=s3_key)


def get_generated_document_data(request_params, pk, include_css=True):
    template_id = request_params.get("template")
    if not template_id:
        raise AttributeError(strings.Cases.GeneratedDocuments.MISSING_TEMPLATE)

    text = request_params.get("text", "")
    additional_contact = request_params.get("addressee")
    if additional_contact:
        try:
            additional_contact = Party.objects.get(type=PartyType.ADDITIONAL_CONTACT, id=additional_contact)
        except Party.DoesNotExist:
            raise AttributeError(strings.Cases.GeneratedDocuments.INVALID_ADDRESSEE)

    case = get_case(pk)
    try:
        template = LetterTemplate.objects.get(pk=template_id, case_types=case.case_type)
    except LetterTemplate.DoesNotExist:
        raise NotFoundError({"letter_template": strings.Cases.GeneratedDocuments.LETTER_TEMPLATE_NOT_FOUND})

    try:
        document_html = generate_preview(
            layout=template.layout.filename,
            text=text,
            case=case,
            additional_contact=additional_contact,
            include_digital_signature=template.include_digital_signature,
            include_css=include_css,
        )

    except DocumentPreviewError:
        raise ValidationError(f"Error generating {template.layout.filename} document preview")

    return GeneratedDocumentPayload(case=case, template=template, document_html=document_html, text=text)


def get_decision_type(advice_type, template):
    # When generating documents during finalise this is provided
    if advice_type:
        return advice_type

    decisions = template.decisions.values_list("name", flat=True)
    if {AdviceType.APPROVE, AdviceType.PROVISO}.intersection(decisions):
        return AdviceType.APPROVE

    if AdviceType.REFUSE in decisions:
        return AdviceType.REFUSE

    if AdviceType.NO_LICENCE_REQUIRED in decisions:
        return AdviceType.NO_LICENCE_REQUIRED

    return advice_type


def get_draft_licence(case, advice_type):
    licence = None

    # this is the case of regenerating document which can happen after
    # finalising the Case so there won't be any draft licences in this case
    if case.status.status == CaseStatusEnum.FINALISED:
        return licence

    if advice_type in [AdviceType.APPROVE, AdviceType.PROVISO]:
        try:
            licence = Licence.objects.get_draft_licence(case)
        except Licence.DoesNotExist:
            raise ParseError({"non_field_errors": [strings.Cases.GeneratedDocuments.LICENCE_ERROR]})

    return licence
