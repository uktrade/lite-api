# Generated by Django 2.2.3 on 2019-07-17 13:23
import json
import uuid

import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import users.models
from conf.settings import env


def initialize(apps, schema_editor):
    GovUser = apps.get_model('users', 'GovUser')
    Team = apps.get_model('teams', 'Team')
    if not GovUser.objects.all():
        for email in json.loads(env('SEED_USERS')):
            gov_user = GovUser(email=email,
                               team=Team.objects.get())
            gov_user.save()

    Role = apps.get_model('users', 'Role')
    if not Role.objects.all():
        role = Role(id='00000000-0000-0000-0000-000000000001',
                    name='Default')
        role.save()

    Permission = apps.get_model('users', 'Permission')
    if not Permission.objects.all():
        permission = Permission(id='MAKE_FINAL_DECISIONS',
                                name='Make final decisions')
        permission.save()


def destroy(apps, schema_editor):
    GovUser = apps.get_model('users', 'GovUser')
    GovUser.objects.all().delete()

    Role = apps.get_model('users', 'Role')
    Role.objects.all().delete()

    Permission = apps.get_model('users', 'Permission')
    Permission.objects.all().delete()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('organisations', '0001_initial'),
        ('teams', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(blank=True, default=None, max_length=254, unique=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Deactivated', 'Deactivated')], default='Active', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', users.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.CharField(editable=False, max_length=30, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=None, max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=None, max_length=30, null=True)),
                ('permissions', models.ManyToManyField(related_name='roles', to='users.Permission')),
            ],
        ),
        migrations.CreateModel(
            name='GovUser',
            fields=[
                ('baseuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('role', models.ForeignKey(default='00000000-0000-0000-0000-000000000001', on_delete=django.db.models.deletion.PROTECT, related_name='role', to='users.Role')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='team', to='teams.Team')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('users.baseuser',),
            managers=[
                ('objects', users.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ExporterUser',
            fields=[
                ('baseuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('organisation', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='organisations.Organisation')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('users.baseuser',),
            managers=[
                ('objects', users.models.CustomUserManager()),
            ],
        ),
        migrations.RunPython(initialize, destroy),
    ]
