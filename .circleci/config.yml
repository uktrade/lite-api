version: 2.1

common_env_vars: &common_env_vars
  ELASTICSEARCH_HOST: http://localhost:9200

image_python: &image_python
  image: cimg/python:3.8.18

image_python_node: &image_python_node
  image: cimg/python:3.8.18-node

image_postgres: &image_postgres
  image: circleci/postgres:12
  environment:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: password

image_elasticsearch: &image_elasticsearch
  image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
  environment:
    ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    xpack.security.enabled: "false"
    xpack.monitoring.enabled: "false"
    xpack.graph.enabled: "false"
    xpack.watcher.enabled: "false"
    transport.host: "localhost"

image_redis: &image_redis
  image: circleci/redis:3.2-alpine

parameters:
  lite_routing_branch_name:
    type: string
    default: "default"

commands:
  install_os_libraries:
    steps:
      - run:
          name: Install OS libraries
          command: |
            sudo apt-get update
            sudo apt-get install swig libpango1.0-0 libcairo2 libpq-dev libpangocairo-1.0-0 imagemagick poppler-utils

  setup:
    steps:
      - checkout
      - run:
          name: Git Submodule Checkout
          command: |
            git submodule sync
            git submodule update --init
      - when:
          condition:
            not:
              and:
                # If not equal default run this step.
                - equal:
                    [
                      default,
                      << pipeline.parameters.lite_routing_branch_name >>,
                    ]
          steps:
            - run:
                name: Git lite_routing Checkout
                command: |
                  echo lite_routing checkout to << pipeline.parameters.lite_routing_branch_name >>
                  cd lite_routing
                  git checkout << pipeline.parameters.lite_routing_branch_name >>
                  cd ..

      # Download and cache dependencies
      # ensure this step occurs *before* installing dependencies
      - restore_cache:
          key: dependencies-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - install_os_libraries
      - run:
          name: Install Dependencies
          command: |
            pipenv sync --dev
            pipenv install endesive==1.5.9
      - save_cache:
          paths:
            - ./.venv
          key: dependencies-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}

  upload_code_coverage:
    parameters:
      alias:
        type: string
    steps:
      - run:
          name: Rename coverage file
          command: mkdir coverage-output && cp .coverage coverage-output/.coverage.<<parameters.alias>>.$(cat /proc/sys/kernel/random/uuid)
      - persist_to_workspace:
          root: coverage-output
          paths:
            - .coverage.*

jobs:
  tests:
    docker:
      - <<: *image_python
      - <<: *image_postgres
      - <<: *image_elasticsearch
      - <<: *image_redis
    working_directory: ~/lite-api
    environment:
      <<: *common_env_vars
      LITE_API_ENABLE_ES: True
    parallelism: 10
    steps:
      - setup
      - run:
          name: Run tests
          command: |
            pipenv run pytest --circleci-parallelize --cov=. --cov-report xml --cov-config=.coveragerc --ignore lite_routing --ignore api/anonymised_db_dumps -k "not seeding and not elasticsearch and not performance and not migration and not db_anonymiser"
      - upload_code_coverage:
          alias: tests

  seeding_tests:
    docker:
      - <<: *image_python
      - <<: *image_postgres
      - <<: *image_elasticsearch
    working_directory: ~/lite-api
    environment:
      <<: *common_env_vars
      LITE_API_ENABLE_ES: True
    steps:
      - setup
      - run:
          name: Run seeding tests
          command: |
            pipenv run pytest --cov=. --cov-report xml --cov-config=.coveragerc -k seeding
      - upload_code_coverage:
          alias: seeding_tests

  anonymised_db_dump_tests:
    docker:
      - <<: *image_python
      - <<: *image_postgres
      - <<: *image_elasticsearch
    working_directory: ~/lite-api
    environment:
      <<: *common_env_vars
      LITE_API_ENABLE_ES: True
    steps:
      - setup
      - run:
          name: Run anonymised DB dump tests
          command: |
            pipenv run pytest --cov=. --cov-report xml --cov-config=.coveragerc api/anonymised_db_dumps
      - upload_code_coverage:
          alias: anonymised_db_dumps

  migration_tests:
    docker:
      - <<: *image_python
      - <<: *image_postgres
      - <<: *image_elasticsearch
      - <<: *image_redis
    working_directory: ~/lite-api
    environment:
      <<: *common_env_vars
      LITE_API_ENABLE_ES: True
    steps:
      - setup
      - run:
          name: Run migration tests
          command: |
            pipenv run pytest --circleci-parallelize --cov=. --cov-report xml --cov-config=.coveragerc -k migration
      - upload_code_coverage:
          alias: migration_tests

  lite_routing_tests:
    docker:
      - <<: *image_python
      - <<: *image_postgres
      - <<: *image_elasticsearch
      - <<: *image_redis
    working_directory: ~/lite-api
    environment:
      <<: *common_env_vars
      LITE_API_ENABLE_ES: True
    parallelism: 5
    steps:
      - setup
      - run:
          name: Run lite_routing tests
          command: |
            pipenv run pytest --circleci-parallelize --cov=. --cov-report xml --cov-config=.coveragerc -k "not migration" --ignore lite_routing/routing_rules_internal/tests/bdd lite_routing
      - upload_code_coverage:
          alias: lite_routing_tests

  lite_routing_bdd_tests:
    docker:
      - <<: *image_python_node
      - <<: *image_postgres
      - <<: *image_elasticsearch
      - <<: *image_redis
    working_directory: ~/lite-api
    environment:
      <<: *common_env_vars
      LITE_API_ENABLE_ES: True
    parallelism: 5
    steps:
      - setup
      - run:
          name: Install cucumber reporter package
          command: npm install multiple-cucumber-html-reporter
      - run:
          name: Create report directories
          command: |
            mkdir cucumber_results
      - run:
          name: Run lite_routing tests
          command: pipenv run pytest --circleci-parallelize --gherkin-terminal-reporter -vv lite_routing/routing_rules_internal/tests/bdd --cucumberjson=cucumber_results/cuc.json
      - run:
          name: Generate html cucumber report
          command: node generate_cucumber_report.js
          when: always
      - store_artifacts:
          path: cucumber_html

  elastic_search_tests:
    docker:
      - <<: *image_python
      - <<: *image_postgres
      - <<: *image_elasticsearch
    working_directory: ~/lite-api
    environment:
      <<: *common_env_vars
      LITE_API_ENABLE_ES: True
    steps:
      - setup
      - run:
          name: Run elasticsearch tests
          command: |
            pipenv run pytest --cov=. --cov-report xml --cov-config=.coveragerc -k elasticsearch
      - upload_code_coverage:
          alias: elastic_search_tests

  check_migrations:
    docker:
      - <<: *image_python
      - <<: *image_postgres
      - <<: *image_elasticsearch
    working_directory: ~/lite-api
    environment:
      <<: *common_env_vars
      LITE_API_ENABLE_ES: True
    steps:
      - setup
      - run:
          name: Check migrations are made
          command: pipenv run ./manage.py makemigrations --check

  check_coverage:
    working_directory: ~/lite-api
    docker:
      - <<: *image_python
    steps:
      - checkout
      - run: git submodule sync --recursive && git submodule update --recursive --init
      - attach_workspace:
          at: ~/lite-api/tmp
      - run: pip install coverage diff_cover
      - run: coverage combine tmp
      - run: coverage xml
      - run: coverage html
      - store_artifacts:
          path: htmlcov
      - run: diff-cover coverage.xml --compare-branch=origin/dev --html-report coverage-report.html
      - store_artifacts:
          path: coverage-report.html
      - run: zip -r coverage.zip htmlcov coverage-report.html
      - store_artifacts:
          path: coverage.zip
      - run: diff-cover coverage.xml --compare-branch=origin/dev --fail-under=100

  linting:
    docker:
      - <<: *image_python
    steps:
      - setup
      - run:
          name: Prospector
          command: pipenv run prospector -W pylint -W pep257 -W mccabe
      - run:
          name: Black
          command: pipenv run black . --check --diff
      - run:
          name: Bandit
          command: |
            pipenv run bandit -r .

  check-lite-routing-sha:
    docker:
      - <<: *image_python
    steps:
      - checkout
      - run:
          name: Git Submodule Checkout
          command: |
            git submodule sync
            git submodule update --init
      - run:
          name: Check lite-routing submodule sha
          command: |
            CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            CHANGED_FILES=$(git diff --name-only $CURRENT_BRANCH $(git merge-base $CURRENT_BRANCH dev))
            if [[ "$CHANGED_FILES" == *"lite_routing"* ]]; then
                cd lite_routing
                SUBMODULE_SHA=$(git rev-parse HEAD)
                git checkout main
                git pull
                LATEST_SUBMODULE_SHA=$(git rev-parse HEAD)
                if [ "$SUBMODULE_SHA" != "$LATEST_SUBMODULE_SHA" ]; then
                    echo "lite-api's lite_routing submodule SHA has been updated but is not pointing to the latest commit on main"
                    echo "Updated lite_routing sha; $SUBMODULE_SHA"
                    echo "main branch lite_routing sha; $LATEST_SUBMODULE_SHA"
                    exit 1
                fi
            fi

  e2e_tests:
    docker:
      - image: cimg/python:3.8.18
    steps:
      - run:
          name: Add known hosts
          command: |
            mkdir ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Create temporary branch and commit on lite-frontend
          command: |
            TEMPORARY_BRANCH_NAME="lite-api-ci-tmp-"
            TEMPORARY_BRANCH_NAME+=$(cat /proc/sys/kernel/random/uuid)
            git clone git@github.com:uktrade/lite-frontend.git
            cd lite-frontend
            git config user.email $GIT_EMAIL
            git config user.name "LITE CI"
            git checkout -b $TEMPORARY_BRANCH_NAME
            git commit --allow-empty -m "Testing lite-api"
            git push origin $TEMPORARY_BRANCH_NAME
            echo "export TEMPORARY_BRANCH_NAME=$TEMPORARY_BRANCH_NAME" >> $BASH_ENV
      - run:
          name: Kick off lite-frontend e2e pipeline
          command: |
            PIPELINE_ID=$(curl --location --request POST 'https://circleci.com/api/v2/project/github/uktrade/lite-frontend/pipeline' \
            --header 'Content-Type: application/json' \
            --header "Circle-Token: ${LITE_FRONTEND_E2E_CI_TOKEN}" \
            --data-raw '{
                "branch": "'"$TEMPORARY_BRANCH_NAME"'",
                "parameters": {
                  "run_ui_tests": true,
                  "run_unit_tests": false,
                  "api_git_tag": "'"$CIRCLE_BRANCH"'",
                  "environment": "dev"
                }
              }' | jq -r '.id')

            echo "export PIPELINE=$PIPELINE_ID" >> $BASH_ENV
      - run:
          name: Check lite-frontend e2e pipeline status
          no_output_timeout: 30m
          command: |
            sleep 10
            API_RESPONSE=$(curl "https://circleci.com/api/v2/pipeline/$PIPELINE/workflow?circle-token=$LITE_FRONTEND_E2E_CI_TOKEN")
            STATUS=$(echo $API_RESPONSE | jq -r '.items[].status')
            PIPELINE_NUMBER=$(echo $API_RESPONSE | jq -r '.items[].pipeline_number')
            ID=$(echo $API_RESPONSE | jq -r '.items[].id')

            echo $STATUS
            echo "Job can be checked at circleci: https://app.circleci.com/pipelines/github/uktrade/lite-frontend/$PIPELINE_NUMBER/workflows/$ID"

            while [ "$STATUS" == "running" ]; do
              echo still running
              sleep 10
              STATUS=$(curl -s "https://circleci.com/api/v2/pipeline/$PIPELINE/workflow?circle-token=$LITE_FRONTEND_E2E_CI_TOKEN" | jq -r '.items[].status')
            done

            echo "finally done, checking final status: $STATUS"
            if [[ "$STATUS" == "success" ]]; then
              echo "Triggered lite-frontend e2e pipeline finished successfully"
              exit 0
            else
              echo "Triggered lite-frontend e2e pipeline was unsuccessful"
              echo https://app.circleci.com/pipelines/github/uktrade/lite-frontend/$PIPELINE_NUMBER/workflows/$ID
              exit 1
            fi
      - run:
          name: Clean up branch
          when: always
          command: |
            cd lite-frontend
            git push origin --delete $TEMPORARY_BRANCH_NAME

workflows:
  tests:
    jobs:
      - linting
      - tests
      - seeding_tests
      - lite_routing_tests
      - lite_routing_bdd_tests
      - elastic_search_tests
      - migration_tests
      - check_migrations
      - check_coverage:
          requires:
              - tests
              - seeding_tests
              - elastic_search_tests
              - migration_tests
              - lite_routing_tests
      - check-lite-routing-sha
      - e2e_tests
      - anonymised_db_dump_tests
