version: 2.1

common_env_vars: &common_env_vars
  ELASTICSEARCH_HOST: http://localhost:9200
  ENABLE_SPIRE_SEARCH: True

image_python: &image_python
  image: cimg/python:3.7.15


image_postgres: &image_postgres
  image: circleci/postgres:11
  environment:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: password

image_elasticsearch: &image_elasticsearch
  image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
  environment:
    ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    xpack.security.enabled: "false"
    xpack.monitoring.enabled: "false"
    xpack.graph.enabled: "false"
    xpack.watcher.enabled: "false"
    transport.host: "localhost"

image_redis: &image_redis
  image: circleci/redis:3.2-alpine

parameters:
  lite_routing_branch_name:
    type: string
    default: "default"

commands:
  install_os_libraries:
    steps:
      - run:
          name: Install OS libraries
          command: |
            sudo apt-get update
            sudo apt-get install swig libpango1.0-0 libcairo2 libpq-dev libpangocairo-1.0-0 imagemagick poppler-utils

  setup:
    steps:
      - checkout
      - run:
          name: Git Submodule Checkout
          command: |
            git submodule sync
            git submodule update --init
      - when:
          condition:
            not:
              and:
                # If not equal default run this step.
                - equal:
                    [
                      default,
                      << pipeline.parameters.lite_routing_branch_name >>,
                    ]
          steps:
            - run:
                name: Git lite_routing Checkout
                command: |
                  echo lite_routing checkout to << pipeline.parameters.lite_routing_branch_name >>
                  cd lite_routing
                  git checkout << pipeline.parameters.lite_routing_branch_name >>
                  cd ..

      # Download and cache dependencies
      # ensure this step occurs *before* installing dependencies
      - restore_cache:
          key: dependencies-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - install_os_libraries
      - run:
          name: Install Dependencies
          command: |
            pipenv sync --dev
            pipenv install endesive==1.5.9
      - run:
          name: Install code coverage
          command: |
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            chmod +x codecov
      - save_cache:
          paths:
            - ./.venv
          key: dependencies-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}

  upload_code_coverage:
    steps:
      - run:
          name: Upload code coverage
          command: ./codecov

jobs:
  tests:
    docker:
      - <<: *image_python
      - <<: *image_postgres
      - <<: *image_elasticsearch
      - <<: *image_redis
    working_directory: ~/lite-api
    environment:
      <<: *common_env_vars
      LITE_API_ENABLE_ES: True
    steps:
      - setup
      - run:
          name: Run tests
          command: |
            pipenv run pytest --cov=. --cov-report xml --cov-config=.coveragerc --ignore lite_routing -k "not seeding and not elasticsearch and not performance"
      - upload_code_coverage

  seeding_tests:
    docker:
      - <<: *image_python
      - <<: *image_postgres
      - <<: *image_elasticsearch
    working_directory: ~/lite-api
    environment:
      <<: *common_env_vars
      LITE_API_ENABLE_ES: True
    steps:
      - setup
      - run:
          name: Run seeding tests
          command: |
            pipenv run pytest --cov=. --cov-report xml --cov-config=.coveragerc -k seeding
      - upload_code_coverage

  lite_routing_tests:
    docker:
      - <<: *image_python
      - <<: *image_postgres
      - <<: *image_elasticsearch
      - <<: *image_redis
    working_directory: ~/lite-api
    environment:
      <<: *common_env_vars
      LITE_API_ENABLE_ES: True
    steps:
      - setup
      - run:
          name: Run lite_routing tests
          command: |
            pipenv run pytest --cov=. --cov-report xml --cov-config=.coveragerc --ignore lite_routing/routing_rules_internal/tests/bdd lite_routing
      - upload_code_coverage

  lite_routing_bdd_tests:
    docker:
      - <<: *image_python
      - <<: *image_postgres
      - <<: *image_elasticsearch
      - <<: *image_redis
    working_directory: ~/lite-api
    environment:
      <<: *common_env_vars
      LITE_API_ENABLE_ES: True
    steps:
      - setup
      - run:
          name: Run lite_routing tests
          command: |
            pipenv run pytest lite_routing/routing_rules_internal/tests/bdd
      - upload_code_coverage

  elastic_search_tests:
    docker:
      - <<: *image_python
      - <<: *image_postgres
      - <<: *image_elasticsearch
    working_directory: ~/lite-api
    environment:
      <<: *common_env_vars
      LITE_API_ENABLE_ES: True
    steps:
      - setup
      - run:
          name: Run elasticsearch tests
          command: |
            pipenv run pytest --cov=. --cov-report xml --cov-config=.coveragerc -k elasticsearch
      - upload_code_coverage

  check_migrations:
    docker:
      - <<: *image_python
      - <<: *image_postgres
      - <<: *image_elasticsearch
    working_directory: ~/lite-api
    environment:
      <<: *common_env_vars
      LITE_API_ENABLE_ES: True
    steps:
      - setup
      - run:
          name: Check migrations are made
          command: pipenv run ./manage.py makemigrations --check

  linting:
    docker:
      - <<: *image_python
    steps:
      - checkout
      - run:
          name: Git Submodule Checkout
          command: |
            git submodule sync
            git submodule update --init
      - restore_cache:
          key: dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - install_os_libraries
      - run:
          name: Install Dependencies
          command: pipenv sync --dev
      - save_cache:
          paths:
            - ./venv
          key: dependencies-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: Prospector
          command: pipenv run prospector -W pylint -W pep257 -W mccabe
      - run:
          name: Black
          command: pipenv run black . --check --diff
      - run:
          name: Bandit
          command: |
            pipenv run bandit -r .

  check-lite-routing-sha:
    docker:
      - <<: *image_python
    steps:
      - checkout
      - run:
          name: Git Submodule Checkout
          command: |
            git submodule sync
            git submodule update --init
      - run:
          name: Check lite-routing submodule sha
          command: |
            CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            CHANGED_FILES=$(git diff --name-only $CURRENT_BRANCH $(git merge-base $CURRENT_BRANCH dev))
            if [[ "$CHANGED_FILES" == *"lite_routing"* ]]; then
                cd lite_routing
                SUBMODULE_SHA=$(git rev-parse HEAD)
                git checkout main
                git pull
                LATEST_SUBMODULE_SHA=$(git rev-parse HEAD)
                if [ "$SUBMODULE_SHA" != "$LATEST_SUBMODULE_SHA" ]; then
                    echo "lite-api's lite_routing submodule SHA has been updated but is not pointing to the latest commit on main"
                    echo "Updated lite_routing sha; $SUBMODULE_SHA"
                    echo "main branch lite_routing sha; $LATEST_SUBMODULE_SHA"
                    exit 1
                fi
            fi

workflows:
  version: 2
  test:
    jobs:
      - tests
      - seeding_tests
      - lite_routing_tests
      - lite_routing_bdd_tests
      - elastic_search_tests
      - check_migrations
      - linting
      - check-lite-routing-sha
